name: CI/CD Pipeline with Docker Compose

on:
  pull_request:
    branches:
      - main  # Trigger this workflow for pull requests targeting the main branch
    # Ensure it only runs if the PR is from the 'chatbot' repository
    types: [closed]
  
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'chatbot' # Only run if the PR is merged and the source is 'chatbot'

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker (ensure Docker is installed)
      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io

      # Set up Docker Compose (install Docker Compose if needed)
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Build and start containers using Docker Compose from the 'bot' folder
      - name: Build and start containers
        run: |
          docker-compose -f bot/docker-compose.yaml up -d --build

      # Clean up containers after the build (optional, if you want to clean up intermediate containers)
      - name: Clean up containers
        run: docker-compose -f bot/docker-compose.yaml down

  deploy:
    needs: build  # This ensures deploy happens only after the build job
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'chatbot'  # Ensure the deploy happens only on a merged PR from 'chatbot' branch

    steps:
      # SSH into the server and deploy the application
      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          script: |
            # Check the Docker version on the server
            docker --version
            # Pull the latest code from GitHub on the server
            git pull origin main
            # Stop and remove the old containers
            docker-compose -f /home/ubuntu/sprinter/Sprinter-Education-Platform/Bot/docker-compose.yaml down
            # Build and start the containers directly on the server using Docker Compose
            docker-compose -f /home/ubuntu/sprinter/Sprinter-Education-Platform/Bot/docker-compose.yaml up -d --build
